# Global Agent Configuration
[agent]
  # Default data collection interval for all inputs
  interval = "10s"
  # Rounds collection interval to 'interval'
  round_interval = true
  # Telegraf will send metrics to outputs in batches of at most metric_batch_size
  metric_batch_size = 1000
  # Telegraf will buffer metric_buffer_limit metrics for each output, and will drop
  # metrics when the buffer is full.
  metric_buffer_limit = 10000
  # Collection jitter is used to jitter the collection by a random amount.
  collection_jitter = "0s"
  # Default flushing interval for all outputs.
  flush_interval = "10s"
  # Jitter the flush interval by a random amount.
  flush_jitter = "0s"
  # Default precision for timestamps
  precision = ""
  # Don't include the hostname in the tags, as it's not relevant here.
  omit_hostname = true

# =============================================================================
#                            INPUT PLUGINS
# =============================================================================

[[inputs.gnmi]]
  # Address of the gNMI server (our BNG simulator)
  addresses = ["bng-simulator:50051"]

  # Subscription mode: "sample" for periodic polling
  subscription_mode = "sample"
  sample_interval = "10s"

  # How long to wait before redialing the server if the connection is lost
  redial = "10s"

  # The encoding of the telemetry data
  encoding = "JSON"

  # Specify that we are using the modern json_v2 parser
  data_format = "json_v2"

  # Define the gNMI subscription path. "/" subscribes to the root.
  [[inputs.gnmi.subscription]]
    path = "/bng-telemetry/"

  # Define how to parse the incoming JSON data
  [[inputs.gnmi.json_v2]]
    # Set the name of the measurement that will be created in InfluxDB
    measurement_name = "bng_subscriber_stats"

    # The 'object' section tells Telegraf how to process a JSON object.
    # This configuration iterates through the 'subscribers' array.
    [[inputs.gnmi.json_v2.object]]
      # GJSON path to the array of objects to process
      path = "subscribers"
      
      # Keys from the JSON object that should be used as tags in InfluxDB.
      # Tags are indexed and are good for 'GROUP BY' queries.
      tags = ["mac"]
      
      # Define the fields to be extracted. Fields are the actual metric values.
      # The keys are the field names in InfluxDB, and the values are GJSON paths
      # to the data within each subscriber object.
      [inputs.gnmi.json_v2.object.fields]
        state                      = "state.current-state"
        input_octets               = "statistics.hardware.input_octets"
        output_octets              = "statistics.hardware.output_octets"
        dhcp_rx_request            = "statistics.dhcpv4.rx_request"
        dhcp_tx_ack                = "statistics.dhcpv4.tx_ack"
        radius_tx_auth_request     = "statistics.radius.tx_auth_request"
        radius_rx_auth_success     = "statistics.radius.rx_auth_success"
        radius_tx_interim_request  = "statistics.radius.tx_interim_request"


# =============================================================================
#                            OUTPUT PLUGINS
# =============================================================================

[[outputs.influxdb_v2]]
  # The URL of the InfluxDB server
  urls = ["http://influxdb:8086"]

  # The API token for authentication. This is read from an environment variable
  # set in the docker-compose.yml file.
  token = "${INFLUX_TOKEN}"

  # The organization and bucket to write data to. These should match the values
  # in your .env file.
  organization = "bng-telemetry-org"
  bucket = "bng-bucket"